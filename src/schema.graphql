type Query {
  me: User
  projects: [Project!]
  trending: [Project!]
  getPosts: [Post!]
  getLocations: [Post!]
  getProjects: [Projects!]
}

type Mutation {
  signUp(data: SignUpInput!): AuthPayload!
  signIn(email: String!, password: String!): AuthPayload!
  updateProfile(data: UpdateProfileInput!): User!
  createPost(data: CreatePostInput!): Post!
  deletePost(id: String!): Post!
  createProject(data: CreateProjectInput): Project!
  editProject(data: EditProjectInput, id: String!): Project!
  markComplete(id: String!): Project!
}

type Subscription {
  me: User
  getFeed: [Post!]
}

type User {
  id: ID!
  password: String!
  name: String!
  email: String!
  posts: [Post!]
  projects: [Project!]
  serious: [Post!]
  trivial: [Post!]
  maximumDistance: Int!
  shareMyFeed: Boolean!
  comments: [Comment!]
}

type Post {
  photo: String!
  id: ID!
  content: String!
  title: String!
  numberOfSerious: Int!
  numberOfTrivial: Int!
  trivial: [User!]
  serious: [User!]
  author: User!
  createdAt: String!
  updatedAt: String!
  location: Location!
  tags: [Tag!]
  comments: [Comment!]
  status: Status
}

type Location {
  lat: String!
  lng: String!
  id: ID!
  post: Post!
}

type Comment {
  id: ID!
  createdAt: String!
  author: User!
  likes: Int!
  post: Post
  project: Project
}

type Project {
  id: ID!
  title: String!
  description: String!
  photo: String!
  createdAt: String!
  comments: [Comment!]
  location: Location!
  author: User!
  updatedAt: String!
  status: String!
}

type Tag {
  id: ID!
  title: String!
  Posts: [Post!]
}

type AuthPayload {
  token: String!
  user: User!
}

enum Status {
  NOTICED
  IN_PROGRESS
  COMPLETE
}

input SignInInput {
  email: String!
  password: String!
}

input SignUpInput {
  email: String!
  password: String!
  name: String!
}

input UpdateProfileInput {
  name: String
  email: String
  maximumDistance: Int
  shareMyFeed: Boolean
}

input CreatePostInput {
  photo: String!
  content: String
  title: String!
  location: LocationInput!
}

input LocationInput {
  lat: Float!
  lng: Float!
}

input CreateProjectInput {
  title: String!
  description: String!
  photo: String!
  location: LocationInput!
}

input EditProjectInput {
  title: String!
  description: String!
  photo: String!
}
